#include stack
#put stack str
function stack_str split { str \_ temp_string , char \_ delimiter } start
str tempstring = "" ;
nat count = 0 ;
nat max = use temp_string.size ;
bool gen = false ;
stack_str \_ split_string ;
char temp_char ;
while { count < max } start
temp_char = use temp_string.at count ;
if { temp_char is delimiter } start
if { &! gen } start
split_string = use stack_str tempstring ;
tempstring = "" ;
gen = true ;
else start
use split_string.add tempstring ;
tempstring = "" ;
end
else start
tempstring += temp_char ;
end
count ++ ;
end
return split_string ;
end
function str join { stack_str \_ list , char \_ delimiter } start
str ret_string = use list.get 0 ;
nat count = 1 ;
nat max = use list.size ;
while { count < max } start
ret_string += delimiter ;
ret_string += use list.get count ;
count ++ ;
end
return ret_string ;
end