#start_def stack type_name
class { stack_ type_name } start
member nat size_num ;
member type_name &* list ;
contains start
cons start
create[] &> list type_name 1 ;
@STACK_TO_HEAP
&> size_num = 1 ;
end
cons { type_name \_ begin } start
create[] &> list type_name 1 ;
@STACK_TO_HEAP
&> list access 0 = begin ;
&> size_num = 1 ;
end
function nat size start
return &> size_num ;
end
function type_name get { nat \_ index } start
return &> list access index ;
end
procedure add { type_name \_ item } start
type_name &* templist ;
nat max = &> size_num ;
create[] templist type_name max ;
nat count = 0 ;
while { count < max } start
templist access count = &> use &> get count ;
count ++ ;
end
destroy &> list ;
&> size_num ++ ;
create[] &> list type_name &> size_num ;
@STACK_TO_HEAP
count = 0 ;
while { count < max } start
&> list access count = templist access count ;
count ++ ;
end
&> list access max = item ;
end
function type_name remove { nat \_ index } start
type_name ret ;
type_name &* templist ;
nat max = &> size_num ;
create[] templist type_name max ;
nat count = 0 ;
while { count < max } start
templist access count = use &> get count ;
count ++ ;
end
&> size_num -- ;
destroy &> list ;
create[] &> list type_name &> size_num ;
@STACK_TO_HEAP
count = 0 ;
nat index_count = 0 ;
while { index_count < max } start
if { index_count is index } start
ret = templist access index ;
index_count ++ ;
end
&> list access count = templist access index_count ;
count ++ ;
index_count ++ ;
end
destroy templist ;
return ret ;
end
function type_name pop start
nat max = &> size_num
max -- ;
max -- ;
return use &> remove max ;
end
function type_name &* get_list start
return &> list ;
end
procedure insert { nat \_ index , type_name \_ item } start
&> list access index = item ;
end
decons start
@CHECK_HEAP
destroy &> templist ;
end
end
end
#end_def
